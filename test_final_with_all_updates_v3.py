#!/usr/bin/env python3
"""
Final comprehensive test with all updates v3
"""

from database.models import Database
from keyboards.navigation import get_week_navigation_keyboard
from utils.schedule_utils import get_week_schedule
from keyboards.group_selection import get_group_confirmation_keyboard
from handlers.group_selection import search_matching_groups
import json


def test_final_with_all_updates_v3():
    """Test final comprehensive functionality with all updates v3"""
    print("Running final comprehensive test with all updates v3...")

    # Initialize database
    db = Database()
    print("‚úì Database initialized")

    # Test group search functionality
    print("\nTesting group search functionality...")
    matches = search_matching_groups("–ú8–û-207–ë–í-24", db)
    assert len(matches) > 0, "Should find exact match"
    assert matches[0]["name"] == "–ú8–û-207–ë–í-24", "Should match exact group name"
    group_id = matches[0]["id"]
    print(f"‚úì Found group: {matches[0]['name']} (ID: {group_id})")

    # Test group confirmation keyboard
    print("\nTesting group confirmation keyboard...")
    group_keyboard = get_group_confirmation_keyboard(group_id, "–ú8–û-207–ë–í-24")

    # Verify group keyboard structure
    assert (
        group_keyboard.inline_keyboard is not None
    ), "Keyboard should have inline_keyboard"
    assert len(group_keyboard.inline_keyboard) == 1, "Keyboard should have one row"
    assert (
        len(group_keyboard.inline_keyboard[0]) == 2
    ), "Keyboard should have two buttons"

    # Check group button texts
    group_buttons = group_keyboard.inline_keyboard[0]
    assert group_buttons[0].text == "–î–∞", "First button should be '–î–∞'"
    assert group_buttons[1].text == "–ù–µ—Ç", "Second button should be '–ù–µ—Ç'"

    # Check group callback data format (should be short)
    assert group_buttons[0].callback_data.startswith(
        "grp_yes:"
    ), "First button should have 'grp_yes:' prefix"
    assert group_buttons[1].callback_data.startswith(
        "grp_no:"
    ), "Second button should have 'grp_no:' prefix"

    # Check that group callback data is short enough for Telegram
    assert (
        len(group_buttons[0].callback_data) <= 64
    ), "Group callback data should be <= 64 characters"
    assert (
        len(group_buttons[1].callback_data) <= 64
    ), "Group callback data should be <= 64 characters"

    print("‚úì Group confirmation keyboard verified")
    print(f"  –î–∞ button callback data: {group_buttons[0].callback_data}")
    print(f"  –ù–µ—Ç button callback data: {group_buttons[1].callback_data}")

    # Test navigation keyboard with different offsets
    print("\nTesting navigation keyboard with different offsets...")

    # Test with offset 0 (current week)
    nav_keyboard_0 = get_week_navigation_keyboard(0)
    print("‚úì Navigation keyboard for current week created")

    # Test with offset 100 (100 weeks ahead)
    nav_keyboard_100 = get_week_navigation_keyboard(100)
    print("‚úì Navigation keyboard for week +100 created")

    # Test with offset -100 (100 weeks back)
    nav_keyboard_neg100 = get_week_navigation_keyboard(-100)
    print("‚úì Navigation keyboard for week -100 created")

    # Verify navigation keyboard structures
    for i, (keyboard, offset) in enumerate(
        [(nav_keyboard_0, 0), (nav_keyboard_100, 100), (nav_keyboard_neg100, -100)]
    ):
        assert (
            keyboard.inline_keyboard is not None
        ), f"Nav keyboard {i} should have inline_keyboard"
        assert (
            len(keyboard.inline_keyboard) == 1
        ), f"Nav keyboard {i} should have one row"
        assert (
            len(keyboard.inline_keyboard[0]) == 3
        ), f"Nav keyboard {i} should have three buttons"

        # Check navigation button texts
        nav_buttons = keyboard.inline_keyboard[0]
        assert (
            nav_buttons[0].text == "‚Üê"
        ), f"Nav keyboard {i} first button should be left arrow"
        assert (
            nav_buttons[1].text == "üè†"
        ), f"Nav keyboard {i} second button should be house emoji"
        assert (
            nav_buttons[2].text == "‚Üí"
        ), f"Nav keyboard {i} third button should be right arrow"

        # Check navigation callback data format (should be short)
        assert nav_buttons[0].callback_data.startswith(
            "sch_"
        ), f"Nav keyboard {i} first button should have 'sch_' prefix"
        assert nav_buttons[1].callback_data.startswith(
            "sch_"
        ), f"Nav keyboard {i} second button should have 'sch_' prefix"
        assert nav_buttons[2].callback_data.startswith(
            "sch_"
        ), f"Nav keyboard {i} third button should have 'sch_' prefix"

        # Check that navigation callback data is short enough for Telegram
        assert (
            len(nav_buttons[0].callback_data) <= 64
        ), f"Nav keyboard {i} first button should be <= 64 characters"
        assert (
            len(nav_buttons[1].callback_data) <= 64
        ), f"Nav keyboard {i} second button should be <= 64 characters"
        assert (
            len(nav_buttons[2].callback_data) <= 64
        ), f"Nav keyboard {i} third button should be <= 64 characters"

        print(f"  Navigation keyboard for offset {offset}:")
        print(f"    ‚Üê Previous week: {nav_buttons[0].callback_data}")
        print(f"    üè† Current week: {nav_buttons[1].callback_data}")
        print(f"    ‚Üí Next week: {nav_buttons[2].callback_data}")

    print("‚úì Navigation keyboards verified")

    # Test schedule retrieval with different offsets
    print("\nTesting schedule retrieval with different offsets...")

    # Test current week schedule
    schedule_0 = get_week_schedule(group_id, db, 0, "–ú8–û-207–ë–í-24")
    print("‚úì Current week schedule retrieval successful")

    # Test schedule 100 weeks ahead
    schedule_100 = get_week_schedule(group_id, db, 100, "–ú8–û-207–ë–í-24")
    print("‚úì Schedule for week +100 retrieval successful")

    # Test schedule 100 weeks back
    schedule_neg100 = get_week_schedule(group_id, db, -100, "–ú8–û-207–ë–í-24")
    print("‚úì Schedule for week -100 retrieval successful")

    # Verify schedule content
    for i, (schedule, offset) in enumerate(
        [(schedule_0, 0), (schedule_100, 100), (schedule_neg100, -100)]
    ):
        assert (
            "<blockquote>" in schedule
        ), f"Schedule {i} should contain blockquote tags"
        assert (
            "</blockquote>" in schedule
        ), f"Schedule {i} should contain closing blockquote tags"
        assert "–ú8–û-207–ë–í-24" in schedule, f"Schedule {i} should contain group name"
        assert "–ü–Ω" in schedule, f"Schedule {i} should contain uppercase Monday (–ü–Ω)"
        assert "–í—Ç" in schedule, f"Schedule {i} should contain uppercase Tuesday (–í—Ç)"
        assert "–°—Ä" in schedule, f"Schedule {i} should contain uppercase Wednesday (–°—Ä)"
        assert "–ß—Ç" in schedule, f"Schedule {i} should contain uppercase Thursday (–ß—Ç)"
        assert "–ü—Ç" in schedule, f"Schedule {i} should contain uppercase Friday (–ü—Ç)"
        assert "–°–±" in schedule, f"Schedule {i} should contain uppercase Saturday (–°–±)"
        assert "–í—Å" in schedule, f"Schedule {i} should contain uppercase Sunday (–í—Å)"
        assert (
            "–í—ã—Ö–æ–¥–Ω–æ–π" in schedule
        ), f"Schedule {i} should contain '–í—ã—Ö–æ–¥–Ω–æ–π' for days without lessons"
        assert "<b>–ü–Ω ~" in schedule, f"Schedule {i} should contain bold Monday"
        assert "<b>–í—Ç ~" in schedule, f"Schedule {i} should contain bold Tuesday"
        assert "<b>–°—Ä ~" in schedule, f"Schedule {i} should contain bold Wednesday"
        assert "<b>–ß—Ç ~" in schedule, f"Schedule {i} should contain bold Thursday"
        assert "<b>–ü—Ç ~" in schedule, f"Schedule {i} should contain bold Friday"
        assert "<b>–°–± ~" in schedule, f"Schedule {i} should contain bold Saturday"
        assert "<b>–í—Å ~" in schedule, f"Schedule {i} should contain bold Sunday"
        assert (
            "–í—ã—Ö–æ–¥–Ω–æ–π\n</blockquote>\n" in schedule
        ), f"Schedule {i} should have newline after '–í—ã—Ö–æ–¥–Ω–æ–π' and after </blockquote>"
        assert (
            "</blockquote>\n<blockquote>" in schedule
        ), f"Schedule {i} should have single newline between blockquotes"

    print("‚úì Schedule content verified")

    # Print final output
    print("\n" + "=" * 70)
    print("FINAL COMPREHENSIVE TEST OUTPUT WITH ALL UPDATES V3")
    print("=" * 70)
    print("Group confirmation message example:")
    print(f"–ú–æ–∂–µ—Ç –±—ã—Ç—å <b><u>–ú8–û-207–ë–í-24</u></b>?\n")

    print("Navigation buttons for extreme offsets:")
    print(
        f"  Offset 0: ‚Üê Previous week: {nav_keyboard_0.inline_keyboard[0][0].callback_data}"
    )
    print(
        f"  Offset 0: üè† Current week: {nav_keyboard_0.inline_keyboard[0][1].callback_data}"
    )
    print(
        f"  Offset 0: ‚Üí Next week: {nav_keyboard_0.inline_keyboard[0][2].callback_data}"
    )
    print()
    print(
        f"  Offset 100: ‚Üê Previous week: {nav_keyboard_100.inline_keyboard[0][0].callback_data}"
    )
    print(
        f"  Offset 100: üè† Current week: {nav_keyboard_100.inline_keyboard[0][1].callback_data}"
    )
    print(
        f"  Offset 100: ‚Üí Next week: {nav_keyboard_100.inline_keyboard[0][2].callback_data}"
    )
    print()
    print(
        f"  Offset -100: ‚Üê Previous week: {nav_keyboard_neg100.inline_keyboard[0][0].callback_data}"
    )
    print(
        f"  Offset -100: üè† Current week: {nav_keyboard_neg100.inline_keyboard[0][1].callback_data}"
    )
    print(
        f"  Offset -100: ‚Üí Next week: {nav_keyboard_neg100.inline_keyboard[0][2].callback_data}"
    )

    print("\nSample schedule for current week:")
    print("=" * 50)
    print(schedule_0)
    print("=" * 50)

    print("\nSample schedule for week +100:")
    print("=" * 50)
    print(schedule_100)
    print("=" * 50)

    print("\nSample schedule for week -100:")
    print("=" * 50)
    print(schedule_neg100)
    print("=" * 50)

    print("\n" + "=" * 70)
    print("FINAL COMPREHENSIVE TEST PASSED!")
    print("All features are working correctly with all updates v3:")
    print("  ‚úì Group selection with partial matching")
    print("  ‚úì Group confirmation with '–î–∞' and '–ù–µ—Ç' buttons")
    print("  ‚úì Short callback data for group buttons within Telegram limits")
    print("  ‚úì Navigation buttons with short callback data")
    print("  ‚úì Navigation callback data within Telegram limits")
    print("  ‚úì No BUTTON_DATA_INVALID errors even for extreme offsets")
    print("  ‚úì Schedule retrieval for different weeks")
    print("  ‚úì Schedule formatting with blockquotes")
    print("  ‚úì Uppercase day names (–ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–±, –í—Å)")
    print("  ‚úì Bold day names and dates")
    print("  ‚úì Single newline after '–í—ã—Ö–æ–¥–Ω–æ–π' and after </blockquote>")
    print("  ‚úì Single newline between blockquotes to prevent merging on mobile")
    print("  ‚úì No newlines before blockquotes")
    print("  ‚úì Proper display of lessons and '–í—ã—Ö–æ–¥–Ω–æ–π'")
    print("=" * 70)


if __name__ == "__main__":
    test_final_with_all_updates_v3()
