#!/usr/bin/env python3
"""
Test script to verify the fixed navigation functionality
"""

from database.models import Database
from keyboards.navigation import get_week_navigation_keyboard
from utils.schedule_utils import get_week_schedule
import json


def test_fixed_navigation():
    """Test fixed navigation functionality"""
    print("Testing fixed navigation functionality...")

    # Initialize database
    db = Database()
    print("‚úì Database initialized")

    # Get the test group
    group_id = db.get_group_id_by_name("–ú8–û-207–ë–í-24")
    if not group_id:
        print("‚úó Test group not found in database")
        return

    print(f"‚úì Found test group: –ú8–û-207–ë–í-24 (ID: {group_id})")

    # Test navigation keyboard with different offsets
    print("\nTesting navigation keyboard with different offsets...")

    # Test with offset 0 (current week)
    keyboard_0 = get_week_navigation_keyboard(0)
    print("‚úì Navigation keyboard for current week created")

    # Test with offset 5 (5 weeks ahead)
    keyboard_5 = get_week_navigation_keyboard(5)
    print("‚úì Navigation keyboard for week +5 created")

    # Test with offset -10 (10 weeks back)
    keyboard_neg10 = get_week_navigation_keyboard(-10)
    print("‚úì Navigation keyboard for week -10 created")

    # Verify keyboard structures
    for i, (keyboard, offset) in enumerate(
        [(keyboard_0, 0), (keyboard_5, 5), (keyboard_neg10, -10)]
    ):
        assert (
            keyboard.inline_keyboard is not None
        ), f"Keyboard {i} should have inline_keyboard"
        assert len(keyboard.inline_keyboard) == 1, f"Keyboard {i} should have one row"
        assert (
            len(keyboard.inline_keyboard[0]) == 3
        ), f"Keyboard {i} should have three buttons"

        # Check button texts
        buttons = keyboard.inline_keyboard[0]
        assert buttons[0].text == "‚Üê", f"Keyboard {i} first button should be left arrow"
        assert (
            buttons[1].text == "üè†"
        ), f"Keyboard {i} second button should be house emoji"
        assert (
            buttons[2].text == "‚Üí"
        ), f"Keyboard {i} third button should be right arrow"

        # Check callback data format (should be short and simple)
        assert buttons[0].callback_data.startswith(
            "sch_"
        ), f"Keyboard {i} first button should have 'sch_' prefix"
        assert buttons[1].callback_data.startswith(
            "sch_"
        ), f"Keyboard {i} second button should have 'sch_' prefix"
        assert buttons[2].callback_data.startswith(
            "sch_"
        ), f"Keyboard {i} third button should have 'sch_' prefix"

        # Check that callback data contains the correct format
        prev_parts = buttons[0].callback_data.split(":")
        curr_parts = buttons[1].callback_data.split(":")
        next_parts = buttons[2].callback_data.split(":")

        assert len(prev_parts) == 3, f"Keyboard {i} previous button should have 3 parts"
        assert len(curr_parts) == 3, f"Keyboard {i} current button should have 3 parts"
        assert len(next_parts) == 3, f"Keyboard {i} next button should have 3 parts"

        # Check that callback data is short enough for Telegram
        assert (
            len(buttons[0].callback_data) <= 64
        ), f"Keyboard {i} previous button should be <= 64 characters"
        assert (
            len(buttons[1].callback_data) <= 64
        ), f"Keyboard {i} current button should be <= 64 characters"
        assert (
            len(buttons[2].callback_data) <= 64
        ), f"Keyboard {i} next button should be <= 64 characters"

        print(f"  Keyboard for offset {offset}:")
        print(f"    ‚Üê Previous week: {buttons[0].callback_data}")
        print(f"    üè† Current week: {buttons[1].callback_data}")
        print(f"    ‚Üí Next week: {buttons[2].callback_data}")

    print("‚úì Navigation keyboards verified")

    # Test schedule retrieval with different offsets
    print("\nTesting schedule retrieval with different offsets...")

    # Test current week schedule
    schedule_0 = get_week_schedule(group_id, db, 0, "–ú8–û-207–ë–í-24")
    print("‚úì Current week schedule retrieval successful")

    # Test schedule 5 weeks ahead
    schedule_5 = get_week_schedule(group_id, db, 5, "–ú8–û-207–ë–í-24")
    print("‚úì Schedule for week +5 retrieval successful")

    # Test schedule 10 weeks back
    schedule_neg10 = get_week_schedule(group_id, db, -10, "–ú8–û-207–ë–í-24")
    print("‚úì Schedule for week -10 retrieval successful")

    # Verify schedule content
    for i, (schedule, offset) in enumerate(
        [(schedule_0, 0), (schedule_5, 5), (schedule_neg10, -10)]
    ):
        assert (
            "<blockquote>" in schedule
        ), f"Schedule {i} should contain blockquote tags"
        assert (
            "</blockquote>" in schedule
        ), f"Schedule {i} should contain closing blockquote tags"
        assert "–ú8–û-207–ë–í-24" in schedule, f"Schedule {i} should contain group name"
        assert "–ø–Ω" in schedule, f"Schedule {i} should contain abbreviated Monday (–ø–Ω)"
        assert "–≤—Ç" in schedule, f"Schedule {i} should contain abbreviated Tuesday (–≤—Ç)"
        assert (
            "—Å—Ä" in schedule
        ), f"Schedule {i} should contain abbreviated Wednesday (—Å—Ä)"
        assert (
            "—á—Ç" in schedule
        ), f"Schedule {i} should contain abbreviated Thursday (—á—Ç)"
        assert "–ø—Ç" in schedule, f"Schedule {i} should contain abbreviated Friday (–ø—Ç)"
        assert (
            "—Å–±" in schedule
        ), f"Schedule {i} should contain abbreviated Saturday (—Å–±)"
        assert "–≤—Å" in schedule, f"Schedule {i} should contain abbreviated Sunday (–≤—Å)"
        assert (
            "–í—ã—Ö–æ–¥–Ω–æ–π" in schedule
        ), f"Schedule {i} should contain '–í—ã—Ö–æ–¥–Ω–æ–π' for days without lessons"

    print("‚úì Schedule content verified")

    # Print sample outputs
    print("\n" + "=" * 70)
    print("FIXED NAVIGATION TEST OUTPUT")
    print("=" * 70)
    print("Navigation buttons for different offsets:")
    print(
        f"  Offset 0: ‚Üê Previous week: {keyboard_0.inline_keyboard[0][0].callback_data}"
    )
    print(
        f"  Offset 0: üè† Current week: {keyboard_0.inline_keyboard[0][1].callback_data}"
    )
    print(f"  Offset 0: ‚Üí Next week: {keyboard_0.inline_keyboard[0][2].callback_data}")
    print()
    print(
        f"  Offset 5: ‚Üê Previous week: {keyboard_5.inline_keyboard[0][0].callback_data}"
    )
    print(
        f"  Offset 5: üè† Current week: {keyboard_5.inline_keyboard[0][1].callback_data}"
    )
    print(f"  Offset 5: ‚Üí Next week: {keyboard_5.inline_keyboard[0][2].callback_data}")
    print()
    print(
        f"  Offset -10: ‚Üê Previous week: {keyboard_neg10.inline_keyboard[0][0].callback_data}"
    )
    print(
        f"  Offset -10: üè† Current week: {keyboard_neg10.inline_keyboard[0][1].callback_data}"
    )
    print(
        f"  Offset -10: ‚Üí Next week: {keyboard_neg10.inline_keyboard[0][2].callback_data}"
    )

    print("\nSample schedule for current week:")
    print("=" * 50)
    print(schedule_0)
    print("=" * 50)

    print("\n" + "=" * 70)
    print("FIXED NAVIGATION TEST PASSED!")
    print("All features are working correctly:")
    print("  ‚úì Short callback data format for navigation buttons")
    print("  ‚úì Callback data within Telegram limits")
    print("  ‚úì Proper offset encoding in callback data")
    print("  ‚úì Schedule retrieval for different weeks")
    print("  ‚úì Schedule formatting with blockquotes")
    print("  ‚úì Abbreviated day names (–ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±, –≤—Å)")
    print("  ‚úì Proper display of lessons and '–í—ã—Ö–æ–¥–Ω–æ–π'")
    print("=" * 70)


if __name__ == "__main__":
    test_fixed_navigation()
